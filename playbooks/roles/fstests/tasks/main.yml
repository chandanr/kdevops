---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  tags: vars

- include_role:
    name: create_data_partition
  tags: [ 'oscheck', 'data_partition' ]

# Distro specific
- include: tasks/install-deps/main.yml

- name: Create {{ truncated_path }} if needed
  include_role:
    name: create_partition
  vars:
    disk_setup_device: "{{ sparsefiles_device }}"
    disk_setup_fstype: "{{ sparsefiles_fstype }}"
    disk_setup_label : "{{ sparsefiles_label }}"
    disk_setup_fs_opts: "{{ sparsefiles_fs_opts }}"
    disk_setup_path: "{{ sparsefiles_path }}"
    disk_setup_user: "{{ data_user }}"
    disk_setup_group: "{{ data_group }}"
  tags: [ 'oscheck', 'sparse_partition' ]

- name: git clone kdevops
  environment:
    GIT_SSL_NO_VERIFY:  true
  git:
    repo: "{{ kdevops_git }}"
    dest: "{{ kdevops_data }}"
  tags: [ 'oscheck', 'install', 'git']

- name: Copy over our .config
  copy:
    src: "{{ playbook_dir }}/../.config"
    dest: "{{ kdevops_dir }}"
  tags: [ 'oscheck', 'install', 'root', 'config']

- name: Install kdevops as root
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  environment:
    FSTYP:  "{{ fstests_fstyp }}"
  command: "{{  make }} install"
  tags: [ 'oscheck', 'install', 'root']
  args:
    chdir: "{{ kdevops_dir }}"

# We do this *after* the /data/ partition is set up so
# we can house the dbench source code there and so that
# we don't have to bother with the setup of that partition
# in the dbench role.
- name: Compile dbench from source if needed by the distribution
  include_role:
    name: compile_dbench
  vars:
    dbench_data: "{{ data_path }}/dbench"
    dbench_git: "https://github.com/linux-kdevops/dbench.git"
  tags: [ 'oscheck', 'git', 'dbench']

- name: Remove any old fstests as we always clone a fresh tree
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    path: "{{ fstests_data }}"
    state: absent
  tags: [ 'oscheck', 'git', 'fstests']

- name: git clone fstests
  git:
    repo: "{{ fstests_git }}"
    dest: "{{ fstests_data }}"
    update: yes
    version: master
  tags: [ 'oscheck', 'git', 'fstests']

- name: Get nproc
  tags: [ 'oscheck', 'fstests', 'build']
  command: "nproc"
  register: nproc

- name: Build fstests
  tags: [ 'oscheck', 'fstests', 'build']
  make:
    chdir: "{{ fstests_data }}"
    jobs: "{{ nproc.stdout }}"

- name: git pull latest kdevops to ensure expunge lists and scripts are up to date
  environment:
    GIT_SSL_NO_VERIFY:  true
  git:
    repo: "{{ kdevops_git }}"
    dest: "{{ kdevops_data }}"
    update: yes
    version: master
  tags: [ 'oscheck', 'install', 'git', 'git_update', 'fstests', 'run_tests' ]

- name: Install fstests
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{  make }} install"
  tags: [ 'oscheck', 'fstests', 'install', 'root']
  args:
    chdir: "{{ fstests_data }}"

- name: Install root generated .kdevops_fstests_setup
  tags: [ 'oscheck', 'fstests', 'run_tests', 'kdevops_fstests_setup', 'install' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  template:
    src: "{{ kdevops_fstests_setup }}"
    dest: "/root/{{ kdevops_fstests_setup }}"
    owner: "root"
    group: "root"
    mode: 0644

- name: source .kdevops_fstests_setup for root if it is not already done
  vars:
    dev_bash_config: ".bashrc"
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  tags: [ 'oscheck', 'fstests', 'run_tests', 'kdevops_fstests_setup', 'install' ]
  shell: |
    SOURCE_KDEVOPS_FSTESTS_SETUP="test -s ~/{{ kdevops_fstests_setup }} && . ~/{{ kdevops_fstests_setup }} || true"
    if [ -f {{ dev_bash_config }} ]; then
      if ! grep "{{ kdevops_fstests_setup_name }}" {{ dev_bash_config }}  2>&1 > /dev/null ; then
        echo "$SOURCE_KDEVOPS_FSTESTS_SETUP" >> {{ dev_bash_config }}
      fi
    else
      echo "#!/bin/bash" >> {{ dev_bash_config }}
      echo "$SOURCE_KDEVOPS_FSTESTS_SETUP" >> {{ dev_bash_config }}
      chmod 755 {{ dev_bash_config }}
    fi
  args:
    executable: /bin/bash

- name: Add symlinks for kdevops scripts for fstests
  tags: [ 'oscheck', 'fstests', 'run_tests', 'kdevops_fstests_setup', 'install' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.file:
    src: "{{ kdevops_data }}/workflows/fstests/scripts/{{ item }}"
    dest: "{{ fstests_data_target }}/{{ item }}"
    state: link
  with_items:
    - gendisks.sh
    - oscheck.sh
    - naggy-check.sh

- name: Create a few directories which kdevops uses for fstests if they do not exist
  tags: [ 'oscheck', 'fstests', 'run_tests', 'kdevops_fstests_setup', 'install' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ fstests_data_target }}/configs"
    - "{{ sparsefiles_path }}"

- name: Copy and force overwrite of the target filesystem fstests configuration
  tags: [ 'oscheck', 'fstests', 'run_tests', 'kdevops_fstests_setup', 'install' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  template:
    src: "{{ fstests_fstyp }}/{{ fstests_fstyp }}.config"
    dest: "{{ fstests_data_target }}/configs/{{ ansible_host }}.config"
    force: yes

- name: Reboot system before our test so we know everything is sane
  tags: [ 'oscheck', 'fstests', 'run_tests', 'reboot' ]
  become: yes
  become_method: sudo
  reboot:
    post_reboot_delay: 10

- name: Make sure loop device support is loaded
  tags: [ 'oscheck', 'fstests', 'run_tests' ]
  become: yes
  become_method: sudo
  command: "modprobe loop"
  when:
    - kdevops_run_fstests|bool

- name: Add missing groups for fstests
  tags: [ 'oscheck', 'fstests', 'install', 'root']
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  group:
    name: "{{ item }}"
    state: present
  with_items:
    - sys
    - fsgqa
    - daemon
    - nobody
  loop_control:
    label: "Ensuring the group {{ item }} exists"

- name: Add missing users if not present
  tags: [ 'oscheck', 'fstests', 'install', 'root']
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  user:
    name: "{{ item }}"
    state: present
    home: "/home/{{ item }}"
    group: "{{ item }}"
  with_items:
    - fsgqa
    - daemon
    - nobody
  loop_control:
    label: "Ensuring the user {{ item }} exists"

- name: Verify section name {{ fstests_section }} exists on fstests config file
  vars:
    fstests_section: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
  tags: [ 'oscheck', 'fstests', 'run_tests', 'section' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: section_grep
  failed_when: not section_grep.changed
  lineinfile:
    path: "{{ fstests_data_target }}/configs/{{ ansible_host }}.config"
    regexp: "\\[{{ fstests_section }}\\]$"
    line: ''
  check_mode: yes
  when:
    - kdevops_run_fstests|bool

# We have to set the environment variables explicitly because some distros
# or systems might have on /etc/sudeors env_reset enabled, which gives us
# as root a clean slate of variables.
- name: Generate loopback disks using sparefiles with gendisk.sh
  tags: [ 'oscheck', 'fstests', 'run_tests', 'gendisks' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./gendisks.sh -d -m"
  register: gendisk_cmd
  args:
    chdir: "{{ fstests_data_target }}"
  environment:
    FSTYP: "{{ fstests_fstyp }}"
    FSTESTS_SPARSE_FILE_PATH: "{{ sparsefiles_path }}"
    FSTESTS_SETUP_SYSTEM: "{{ fstests_setup_system }}"
    FSTESTS_TESTDEV_SPARSEFILE_GENERATION: "{{ sparsefiles_generation }}"
    FSTESTS_SPARSE_FILE_SIZE: "{{ sparsefiles_size }}"
    FSTESTS_SPARSE_FILENAME_PREFIX: "{{ sparsefiles_filename_prefix }}"
    TEST_DEV: "{{ fstests_test_dev }}"
    TEST_DIR: "{{ fstests_test_dir }}"
  when:
    - kdevops_run_fstests|bool
    - sparsefiles_generation == "y"

- name: Capture gendisk output
  tags: [ 'oscheck', 'fstests', 'run_tests', 'gendisks' ]
  debug:
    msg: "{{ gendisk_cmd.stdout_lines }}"
  when:
    - kdevops_run_fstests|bool
    - fstests_debug|bool

- name: Check and verify fstests dependencies are met prior to running fstests
  vars:
    fstests_section: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
  tags: [ 'oscheck', 'fstests', 'run_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./oscheck.sh --check-deps --test-section {{ fstests_section }}"
  args:
    chdir: "{{ fstests_data_target }}"
  environment:
    FSTYP: "{{ fstests_fstyp }}"
    FSTESTS_SPARSE_FILE_PATH: "{{ sparsefiles_path }}"
    FSTESTS_SETUP_SYSTEM: "{{ fstests_setup_system }}"
    FSTESTS_TESTDEV_SPARSEFILE_GENERATION: "{{ sparsefiles_generation }}"
    FSTESTS_SPARSE_FILE_SIZE: "{{ sparsefiles_size }}"
    FSTESTS_SPARSE_FILENAME_PREFIX: "{{ sparsefiles_filename_prefix }}"
    TEST_DEV: "{{ fstests_test_dev }}"
    TEST_DIR: "{{ fstests_test_dir }}"
  when:
    - kdevops_run_fstests|bool

- name: Set the path where we collect our fstests results
  set_fact:
    fstests_results_target: "../workflows/fstests/"
  tags: [ 'oscheck', 'fstests', 'run_tests', 'checktime', 'augment_expunge_list' ]

- name: Look for prior check.time files on {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'run_tests', 'checktime' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ fstests_data_target }}"
    recurse: yes
    patterns: "check.time"
  register: checktime_files

- name: Copy prior check.time files from {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'run_tests', 'checktime' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  fetch:
    src: "{{ item.path }}"
    dest: "{{ fstests_results_target }}/{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
    flat: yes
  with_items: "{{ checktime_files.files }}"
  loop_control:
    label: "{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
  when:
    - checktime_files.matched > 0

- name: Clear out old results directory
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    state: absent
    path: "{{ fstests_data_target }}/results/"
  tags: [ 'oscheck', 'fstests', 'run_tests', 'clean_results' ]

- name: Print uname for each host
  tags: [ 'oscheck', 'fstests', 'run_tests' ]
  debug: var=ansible_kernel

- name: Hint to watchdog tests are about to kick off
  local_action: file path="{{ fstests_results_target }}/.begin" state=touch
  tags: [ 'oscheck', 'fstests', 'run_tests' ]
  when:
    - kdevops_run_fstests|bool
  run_once: true

- name: Enable low-level messages on console
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: sysctl kernel.printk="8 8 1 7"

- name: Run fstests using ./oscheck.sh --print-done --test-section {{ fstests_section }} {{ oscheck_extra_args }}
  vars:
    fstests_section: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
  tags: [ 'oscheck', 'fstests', 'run_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./oscheck.sh --print-start --print-done --test-section {{ fstests_section }} {{ oscheck_extra_args }}"
  ignore_errors: yes
  no_log: True
  args:
    chdir: "{{ fstests_data_target }}"
  environment:
    FSTYP: "{{ fstests_fstyp }}"
    FSTESTS_SPARSE_FILE_PATH: "{{ sparsefiles_path }}"
    FSTESTS_SETUP_SYSTEM: "{{ fstests_setup_system }}"
    FSTESTS_LINUX_LOCALVERSION: "{{ target_linux_localversion  | default ('') }}"
    FSTESTS_TESTDEV_SPARSEFILE_GENERATION: "{{ sparsefiles_generation }}"
    FSTESTS_SPARSE_FILE_SIZE: "{{ sparsefiles_size }}"
    FSTESTS_SPARSE_FILENAME_PREFIX: "{{ sparsefiles_filename_prefix }}"
    FSTESTS_RUN_LARGE_DISK_TESTS: "{{ run_large_disk_tests | default ('') }}"
    FSTESTS_RUN_AUTO_GROUP_TESTS: "{{ run_auto_group_tests | default ('y') }}"
    FSTESTS_RUN_CUSTOM_GROUP_TESTS: "{{ run_custom_group_tests | default ('') }}"
    TEST_DEV: "{{ fstests_test_dev }}"
    TEST_DIR: "{{ fstests_test_dir }}"
  when:
    - kdevops_run_fstests|bool

- name: Remove watchdog hint that tests have started
  local_action: file path="{{ fstests_results_target }}/.begin" state=absent
  tags: [ 'oscheck', 'fstests', 'run_tests' ]
  when:
    - kdevops_run_fstests|bool
  run_once: true

- name: Set the path where we collect our fstests results and have our expunge list
  set_fact:
    fstests_results_target: "../workflows/fstests/"
  tags: [ 'oscheck', 'fstests', 'copy_results', 'print_results' ]

- name: Clean up our localhost results directory and files
  local_action: file path="{{ fstests_results_target }}/{{ item }}" state=absent
  with_items:
    - "results"
    - "xunit_results.txt"
    - "bad_results.txt"
  loop_control:
    label: "{{ item }}"
  run_once: true
  tags: [ 'oscheck', 'fstests', 'copy_results', 'clean_local_results' ]

- name: Look for the check.time files on {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'copy_results', 'checktime' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ fstests_data_target }}"
    recurse: yes
    patterns: "check.time"
  register: checktime_files

- name: Copy the latest run check.time files from {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'copy_results', 'checktime' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  fetch:
    src: "{{ item.path }}"
    dest: "{{ fstests_results_target }}/{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
    flat: yes
  with_items: "{{ checktime_files.files }}"
  loop_control:
    label: "{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
  when:
    - checktime_files.matched > 0

- name: Look for the check.log files on {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'copy_results', 'checklog' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ fstests_data_target }}"
    recurse: yes
    patterns: "check.log"
  register: checklog_files

- name: Copy the latest run check.log files from {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'copy_results', 'checklog' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  fetch:
    src: "{{ item.path }}"
    dest: "{{ fstests_results_target }}/{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
    flat: yes
  with_items: "{{ checklog_files.files }}"
  loop_control:
    label: "{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
  when:
    - checklog_files.matched > 0

- name: Look for xunit results files on {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'copy_results', 'xunit' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ fstests_data_target }}"
    recurse: yes
    patterns: "*.xml"
  register: xunit_files

- name: Copy xunit results files from {{ fstests_data_target }}
  tags: [ 'oscheck', 'fstests', 'copy_results', 'xunit' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  fetch:
    src: "{{ item.path }}"
    dest: "{{ fstests_results_target }}/{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
    flat: yes
  with_items: "{{ xunit_files.files }}"
  loop_control:
    label: "{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
  when:
    - xunit_files.matched > 0

- name: Look for tests which failed
  tags: [ 'oscheck', 'fstests', 'copy_results', 'failed_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ fstests_data_target }}"
    recurse: yes
    patterns: "*.out.bad,*.dmesg"
  register: failed_tests

- name: Copy data for tests that failed
  tags: [ 'oscheck', 'fstests', 'copy_results', 'failed_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  fetch:
    src: "{{ item.path }}"
    dest: "{{ fstests_results_target }}/{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
    flat: yes
  with_items: "{{ failed_tests.files }}"
  loop_control:
    label: "{{ item.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
  when:
    - failed_tests.matched > 0

- name: Check if respective bad full file exists exists
  tags: [ 'oscheck', 'fstests', 'copy_results', 'failed_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  vars:
    tests_full_group_dir: "{{ item.path | dirname }}"
    tests_group_dir: "{{ tests_full_group_dir | split('/') | last }}"
    tests_full_name: "{{ item.path | basename | split('.') | first }}.full"
    tests_name: "{{ tests_group_dir }}/{{ tests_full_name }}"
  stat:
    path: "{{ tests_full_group_dir }}/{{ tests_full_name }}"
  with_items: "{{ failed_tests.files }}"
  loop_control:
    label: "Looking for {{ tests_name }}"
  register: bad_full_file_stats
  when:
    - failed_tests.matched > 0

- name: Copy test full bad result file over
  tags: [ 'oscheck', 'fstests', 'copy_results', 'failed_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  vars:
    tests_full_group_dir: "{{ item.item.path | dirname }}"
    tests_group_dir: "{{ tests_full_group_dir | split('/') | last }}"
    tests_full_name: "{{ item.item.path | basename | split('.') | first }}.full"
    tests_name: "{{ tests_group_dir }}/{{ tests_full_name }}"
  fetch:
    src: "{{ item.stat.path }}"
    dest: "{{ fstests_results_target }}/{{ item.stat.path | regex_replace(fstests_data_target | regex_escape()) | regex_replace('^/', '') }}"
    flat: yes
  with_items: "{{ bad_full_file_stats.results }}"
  loop_control:
    label: "Copying over {{ tests_name }}"
  when:
    - failed_tests.matched > 0
    - item.stat.exists

- name: Print fstests results to xunit_results.txt on localhost if xunit xml file was found
  local_action: "shell ./python/workflows/fstests/gen_results_summary --results_file result.xml  --print_section --output_file {{ fstests_results_target }}/results/xunit_results.txt {{ fstests_results_target }}/results"
  tags: [ 'oscheck', 'fstests', 'copy_results', 'print_results', 'augment_expunge_list' ]
  when:
    - xunit_files.matched > 0
  run_once: true

- name: Print fstests bad results for {{ fstests_fstyp }} to bad_results.txt on localhost
  local_action: "shell ./python/workflows/fstests/bad_files_summary.py {{ fstests_fstyp }} {{ fstests_results_target }}/results > {{ fstests_results_target }}/bad_results.txt"
  tags: [ 'oscheck', 'fstests', 'copy_results', 'print_results', 'augment_expunge_list' ]
  when:
    - failed_tests.matched > 0
  run_once: true

- name: Create check.time.distribution files for {{ fstests_results_target }}/results
  local_action: "shell ./python/workflows/fstests/fstests-checktime-distribution.py {{ fstests_results_target }}/results"
  tags: [ 'oscheck', 'fstests', 'copy_results', 'augment_expunge_list' ]
  run_once: true
  when:
    - checktime_files.matched > 0

- name: Augment expunge list for {{ fstests_fstyp }}, just run git diff after this to see new failures found
  local_action: "shell ./python/workflows/fstests/augment_expunge_list.py {{ fstests_fstyp }} {{ fstests_results_target }}/results {{ fstests_results_target }}/expunges/"
  tags: [ 'oscheck', 'fstests', 'copy_results', 'augment_expunge_list' ]
  run_once: true

- name: Print fstests new expunge files for {{ fstests_fstyp }} which are not yet committed
  local_action: "shell ./python/workflows/fstests/get_new_expunge_files.py {{ fstests_fstyp }} {{ fstests_results_target }}/expunges/ > {{ fstests_results_target }}/new_expunge_files.txt"
  tags: [ 'oscheck', 'fstests', 'copy_results', 'print_results', 'augment_expunge_list' ]
  run_once: true

- name: Get stat of new files not yet committed, ie, new expunge files
  local_action: stat path="{{ fstests_results_target }}/new_expunge_files.txt"
  register: new_expunge_files_stat
  run_once: true
  tags: [ 'oscheck', 'fstests', 'copy_results', 'print_results', 'augment_expunge_list' ]

- name: Inform user if new expunge files have been found
  run_once: true
  tags: [ 'oscheck', 'fstests', 'copy_results', 'augment_expunge_list' ]
  debug:
    msg: "New expunge files found in: {{ fstests_results_target | regex_replace('^../', '') }}new_expunge_files.txt"
  when:
    - new_expunge_files_stat.stat.size != 0

- name: Inform user if no failures have been found
  tags: [ 'oscheck', 'fstests', 'copy_results', 'augment_expunge_list' ]
  debug:
    msg: No *.bad or xunit xml files were found on the target host
  when:
    - failed_tests.matched == 0
    - xunit_files.matched == 0
    - new_expunge_files_stat.stat.size != 0
