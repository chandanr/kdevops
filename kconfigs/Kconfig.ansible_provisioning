if !KDEVOPS_ANSIBLE_PROVISION_ENABLE

config KDEVOPS_PLAYBOOK_DIR
	string
	default $(shell, echo $KDEVOPS_PLAYBOOKS_DIR)
	help
	  The directory where ansible playbooks are found.

endif # KDEVOPS_ANSIBLE_PROVISION_ENABLE

config HAVE_DISTRO_PREFERS_DISABLE_ANSIBLE
	bool
	default n

config KDEVOPS_ANSIBLE_PROVISION_ENABLE
	bool "Enable ansible provisioning"
	default n if HAVE_DISTRO_PREFERS_DISABLE_ANSIBLE || !KDEVOPS_TRY_REFRESH_REPOS
	default y if !HAVE_DISTRO_PREFERS_DISABLE_ANSIBLE || KDEVOPS_TRY_REFRESH_REPOS
	help
	  If enabled we will provision the target hosts with ansible as a last
	  last step after bringup. This playbook used to provision is
	  configurable refer to CONFIG_KDEVOPS_ANSIBLE_INVENTORY_FILE.

if KDEVOPS_ANSIBLE_PROVISION_ENABLE

config KDEVOPS_ANSIBLE_PROVISION_PLAYBOOK
	string "The name of the ansible playbook file to use when provisioning"
	default "devconfig.yml"
	  help
	  The final provisioned playbook to run after bringup. We try to not do
	  much on bringup, for this reason we only allow specifying one
	  playbook to do provisioning. If users want to add more playbooks,
	  new make targets can be added to kdevops for more workflows.

config KDEVOPS_DEVCONFIG_ENABLE
	bool
	default y
	depends on KDEVOPS_ANSIBLE_PROVISION_PLAYBOOK="devconfig.yml"

config KDEVOPS_DEVCONFIG_ENABLE_CONSOLE
	bool "Enable console setup"
	default y
	depends on KDEVOPS_DEVCONFIG_ENABLE
	  help
	  Enable this so that we configure and enable console serial settings
          for you on /etc/default/grub.

if KDEVOPS_DEVCONFIG_ENABLE_CONSOLE

config KDEVOPS_DEVCONFIG_KERNEL_CONSOLE_SETTINGS
	string "Kernel command line console kernel parameters to use"
	default "console=tty0 console=tty1 console=ttyS0,115200n8"
	  help
          Linux kernel console kernel parameters to use. This will be appended
	  to the GRUB configuration file /etc/default/grub on the variable
          GRUB_CMDLINE_LINUX_DEFAULT, if and only if you did not have any
          console settings already set.

config KDEVOPS_DEVCONFIG_GRUB_SERIAL_COMMAND
	string "GRUB specific serial settings"
	default "serial --speed=115200 --unit=0 --parity=no --stop=1"
	  help
          GRUB console settings to use. This will be appended to the GRUB
          configuration file /etc/default/grub on the variable
          GRUB_SERIAL_COMMAND, if and only if we did change the your console
          settings as per the above configured kernel parameters passed.

config KDEVOPS_GRUB_TIMEOUT
	int "GRUB timeout"
	default 2
	  help
          GRUB timeout to wait for user interaction to let you pick another
          kernel or boot options.

endif # KDEVOPS_DEVCONFIG_ENABLE_CONSOLE

config KDEVOPS_DEVCONFIG_ENABLE_SYSTEMD_WATCHDOG
	bool "Enable systemd watchdog setup"
	default y
	depends on KDEVOPS_DEVCONFIG_ENABLE
	  help
	  Enable this to allow you to configure your systemd watchdog configuration.
	  For details refer to: https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html

if KDEVOPS_DEVCONFIG_ENABLE_SYSTEMD_WATCHDOG

config KDEVOPS_DEVCONFIG_SYSTEMD_WATCHDOG_TIMEOUT_RUNTIME
	string "Configures the RuntimeWatchdogSec settting"
	default "5min"
	  help
          Configures the systemd watchdog RuntimeWatchdogSec setting.

config KDEVOPS_DEVCONFIG_SYSTEMD_WATCHDOG_TIMEOUT_REBOOT
	string "Configures the RebootWatchdogSec settting"
	default "10min"
	  help
          Configures the systemd watchdog RebootWatchdogSec setting.

config KDEVOPS_DEVCONFIG_SYSTEMD_WATCHDOG_TIMEOUT_KEXEC
	string "Configures the KexecWatchdogSec settting"
	default "5min"
	  help
          Configures the systemd watchdog KexecWatchdogSec setting.

endif # KDEVOPS_DEVCONFIG_ENABLE_SYSTEMD_WATCHDOG

config KDEVOPS_PLAYBOOK_DIR
	string "The directory for the ansible playbooks to use"
	default $(shell, echo $KDEVOPS_PLAYBOOKS_DIR)
	help
	  The directory where ansible playbooks are found.

config KDEVOPS_ANSIBLE_INVENTORY_FILE
	string "The ansible inventory file to use"
	default $(shell, echo $KDEVOPS_HOSTFILE)
	help
	  The file to use for the ansible inventory.

config HAVE_DISTRO_PREFERS_ANSIBLE_PYTHON2
	bool
	default n

config KDEVOPS_PYTHON_INTERPRETER
	string "Which default python interpreter to use"
	default "/usr/bin/python2" if HAVE_DISTRO_PREFERS_ANSIBLE_PYTHON2
	default "/usr/bin/python3" if !HAVE_DISTRO_PREFERS_ANSIBLE_PYTHON2
	help
	  The python interpreter must be specified clearly for each host when
	  using ansible, otherwise you will run into odd issues if the
	  heuristics used by ansible are incorrect. Specify the default
	  python interpreter we should use on the target hosts. You shouldn't
	  need to modify unless you are going to be working with a distribution
	  which we have not yet added support for. You can also instead use
	  the old interpreter in your file if you know you are working with
	  old hosts.

config KDEVOPS_PYTHON_OLD_INTERPRETER
	string "Which python interpreter to use for old systems"
	default "/usr/bin/python2"
	help
	  The default python interpreter may be python3 but we need something
	  so that we can specify it on older systems. You can then use the
	  KDEVOPSPYTHONOLDINTERPRETER value on your hosts.in file on old
	  systems so that this gets properly placed.

if KDEVOPS_DEVCONFIG_ENABLE

config KDEVOPS_DEVCONFIG_CUSTOM_REPOS
	string "Comma separated list of custom repositories to be enabled"
	default ""
	help

config KDEVOPS_DEVCONFIG_CUSTOM_PACKAGES
	string "Comma separated list of custom packages to be installed"
	default ""
	help

endif # KDEVOPS_DEVCONFIG_ENABLE

endif # KDEVOPS_ANSIBLE_PROVISION_ENABLE
